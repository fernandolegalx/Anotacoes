+Programação funcional com Java+


//// Função anonima
Runnable r = new Runnable() {
     public void run() {
          System.out.println("Thread com classer interna!");
     }
};
new Thread(r).start();

---> Utilizando laço de repetição

System.out.println("Imprime todos os elementos da lista!");
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
for(Integer n: list) {
    System.out.println(n);
}

-----> Utilização do forEach

System.out.println("Imprime todos os elementos pares da lista!");
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
list.forEach(n -> {
       if (n % 2 == 0) {
             System.out.println(n);
       }
});


---> Utilizando o consumer

public class Consumidor extends Função {
	public static void main(String[] args) {
		Consumer<Produto> imprimir 
		= p -> System.out.println(p.nome);
		
		Produto p1 = new Produto("Caneta", 12.34, 0.10);
		imprimir.accept(p1);
		
		
		Produto p2 = new Produto("Notebook", 1000.00, 0.10);
		Produto p3 = new Produto("Conhecimento", 240.00, 0.10);
		Produto p4 = new Produto("Teste", 150.00, 0.10);
		Produto p5 = new Produto("Carro", 600.00, 0.10);


		
		List<Produto> produtos = Arrays.asList(p1,p2,p3,p4,p5);
		produtos.forEach(imprimir);
		produtos.forEach(p -> System.out.println("Preco = " + p.preco));
		produtos.forEach(System.out::println);
	}

}


---> Utilização do BinaryOperator 
[+]---------------------------------------------------------------------------------------------------[+]
"representa um operador binário que pega dois operandos e opera sobre eles para produzir um resultado.
No entanto, o que o distingue de um BiFunciton normal é que ambos os argumentos e o tipo de retorno são iguais."
[+]---------------------------------------------------------------------------------------------------[+]
		BinaryOperator<Double> media = 
				(n1, n2) -> (n1 + n2) / 2;
				/////////
		BiFunction<Double, Double, String> resultado = 
				(n1, n2) -> {
					double notaFinal = (n1 + n2) /2;
					return notaFinal >= 7 ? "Aprovado" : "Reprovado";
				};
				System.out.printf("your endpoint is\n"
						+ ": ");
				System.out.println(resultado.apply(9.7, 5.1));
				
[+]-----------------------------------------------------------------------------------------------------[+]
