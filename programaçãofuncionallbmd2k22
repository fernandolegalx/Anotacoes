+Programação funcional com Java+


//// Função anonima
Runnable r = new Runnable() {
     public void run() {
          System.out.println("Thread com classer interna!");
     }
};
new Thread(r).start();

---> Utilizando laço de repetição

System.out.println("Imprime todos os elementos da lista!");
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
for(Integer n: list) {
    System.out.println(n);
}

-----> Utilização do forEach

System.out.println("Imprime todos os elementos pares da lista!");
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
list.forEach(n -> {
       if (n % 2 == 0) {
             System.out.println(n);
       }
});


---> Utilizando o consumer

public class Consumidor extends Função {
	public static void main(String[] args) {
		Consumer<Produto> imprimir 
		= p -> System.out.println(p.nome);
		
		Produto p1 = new Produto("Caneta", 12.34, 0.10);
		imprimir.accept(p1);
		
		
		Produto p2 = new Produto("Notebook", 1000.00, 0.10);
		Produto p3 = new Produto("Conhecimento", 240.00, 0.10);
		Produto p4 = new Produto("Teste", 150.00, 0.10);
		Produto p5 = new Produto("Carro", 600.00, 0.10);


		
		List<Produto> produtos = Arrays.asList(p1,p2,p3,p4,p5);
		produtos.forEach(imprimir);
		produtos.forEach(p -> System.out.println("Preco = " + p.preco));
		produtos.forEach(System.out::println);
	}

}


---> Utilização do BinaryOperator 
[+]---------------------------------------------------------------------------------------------------[+]
"representa um operador binário que pega dois operandos e opera sobre eles para produzir um resultado.
No entanto, o que o distingue de um BiFunciton normal é que ambos os argumentos e o tipo de retorno são iguais."
[+]---------------------------------------------------------------------------------------------------[+]
		BinaryOperator<Double> media = 
				(n1, n2) -> (n1 + n2) / 2;
				/////////
		BiFunction<Double, Double, String> resultado = 
				(n1, n2) -> {
					double notaFinal = (n1 + n2) /2;
					return notaFinal >= 7 ? "Aprovado" : "Reprovado";
				};
				System.out.printf("your endpoint is\n"
						+ ": ");
				System.out.println(resultado.apply(9.7, 5.1));
				
[+]-----------------------------------------------------------------------------------------------------[+]




Streams API

[+]----------------------------------------------------------------------------------------[+]

----> Utilização da função Match

public class Match {
	public static void main(String[] args) {
		Aluno a1 = new Aluno("Ana", 7.1);
		Aluno a2 = new Aluno("Pedro", 8.1);
		Aluno a3 = new Aluno("Sab", 7.1);
		Aluno a4 = new Aluno("João", 8.1);

		List<Aluno> alunos = Arrays.asList(a1, a2, a3, a4);
		Predicate<Aluno> aprovado = a -> a.nota >= 7;
		Predicate<Aluno> reprovado = aprovado.negate();

		
		System.out.println(alunos.stream().allMatch(aprovado));
		System.out.println(alunos.stream().anyMatch(aprovado));


	}
}

-----> Utilização do reduce

public class Reduce1 {
	public static void main(String[] args) {
		List<Integer> nums = Arrays.asList(1,2,3,4,5,6,7,8,9);
		
		BinaryOperator<Integer> soma = (ac, n) -> ac + n;
		
		Integer total1 = nums.stream().reduce(soma).get();
		System.out.println(total1);
		
		Integer total2 = nums.parallelStream().reduce(100, soma);
		System.out.println(total2);
		
		nums.stream()
			.filter(n -> n > 5)
			.reduce(soma)
			.ifPresent(System.out::println);
		}
}

----------> Utilização do takeWhile

public class Outro {
	public static void main(String[] args) {
		Aluno a1 = new Aluno("Ana", 7.1);
		Aluno a2 = new Aluno("Pedro", 8.1);
		Aluno a3 = new Aluno("Sab", 7.1);
		Aluno a4 = new Aluno("João", 8.1);
		Aluno a5 = new Aluno("Ana", 7.1);
		Aluno a6 = new Aluno("Pedro", 8.1);
		Aluno a7 = new Aluno("Luiz", 7.1);
		Aluno a8 = new Aluno("João", 8.1);
		
		List<Aluno> alunos = Arrays.asList(a1, a2, a3, a4, a5, a6, a7, a8);
		System.out.println("distinct...");
		alunos.stream().distinct().forEach(System.out::println);
		System.out.println("\nSkip/Limit");
		alunos.stream()
			.distinct()
			.skip(2)
			.limit(2)
			.forEach(System.out::println);
		
		System.out.println("takeWhile...");
		alunos.stream()
			.distinct()
			.skip(2)
			.takeWhile(a -> a.nota >= 7)
			.limit(2)
			.forEach(System.out::println);
	}
}



-----> Utilizando Min  & Max

	public static void main(String[] args) {
		Aluno a1 = new Aluno("Ana", 7.1);
		Aluno a2 = new Aluno("Pedro", 8.1);
		Aluno a3 = new Aluno("Sab", 7.1);
		Aluno a4 = new Aluno("João", 8.1);
		
		List<Aluno> alunos = Arrays.asList(a1,a2,a3,a4);
		Comparator<Aluno> melhorNota = (aluno1, aluno2) -> {
			
			if(aluno1.nota > aluno2.nota) return 1;
			if(aluno1.nota < aluno2.nota) return -1;
			return 0;
			 
		};	
		
		Comparator<Aluno> piorNota = (aluno1, aluno2) -> {
			
			if(aluno1.nota > aluno2.nota) return -1;
			if(aluno1.nota < aluno2.nota) return 1;
			return 0;
			 
		};	
		
		System.out.println(alunos.stream().max(melhorNota).get());
		System.out.println(alunos.stream().min(melhorNota).get());
		System.out.println(alunos.stream().max(piorNota).get());

	}
}


